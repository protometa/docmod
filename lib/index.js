// Generated by CoffeeScript 1.7.1

/*

DOCMOD
 */

(function() {
  var Q, each, fs, jade, link, load, md, p, request, strm, u, util, yaml;

  fs = require('fs');

  strm = require('stream');

  p = require('path');

  u = require('url');

  util = require('util');

  yaml = require('js-yaml');

  request = require('request');

  each = require('each-async');

  Q = require('q');

  jade = require('jade');

  md = require('marked');

  require('obj-uber');

  link = function(req, arg, isindex) {
    var opt, opturl, pathname, reqpath, requrl;
    opt = {};
    if (typeof arg === 'string') {
      opt.url = arg;
    } else {
      opt = arg;
    }
    requrl = u.parse(req.url);
    opturl = u.parse(opt.url);
    reqpath = opt.url;
    if (opturl.hostname == null) {
      if (opturl.pathname[0] === '/') {
        reqpath = opt.url;
      } else {
        pathname = requrl.pathname;
        if (!isindex) {
          pathname = requrl.pathname;
          pathname = pathname.split('/');
          pathname = pathname.slice(0, pathname.length - 1).join('/');
        }
        reqpath = p.join(pathname, opt.url);
      }
    }
    return reqpath;
  };

  load = function(req, arg, callpath, isindex) {
    var opt, opturl, pathname, requrl;
    opt = {};
    if (typeof arg === 'string') {
      opt.url = arg;
    } else {
      opt = arg;
      if (opt.qs == null) {
        opt.qs = opt.query;
      }
    }
    requrl = u.parse(req.url);
    opturl = u.parse(opt.url);
    pathname = opturl.pathname;
    if (opturl.hostname == null) {
      if (opturl.pathname[0] !== '/') {
        if (callpath != null) {
          if (isindex) {
            pathname = p.join(callpath, opt.url);
          } else {
            callpath = callpath.split('/');
            callpath = callpath.slice(0, callpath.length - 1).join('/');
            pathname = p.join(callpath, opt.url);
            console.log('pathname:', pathname);
          }
          return fs.createReadStream(pathname, {
            encoding: 'utf8'
          });
        } else {
          pathname = p.join(opturl.pathname, opt.url);
        }
      }
      opt.url = u.format({
        protocol: 'http:',
        hostname: 'localhost',
        port: req.socket.localPort,
        pathname: pathname,
        search: requrl.query
      });
    }
    if (opt.headers == null) {
      opt.headers = {
        'accept-encoding': null
      };
    }
    return req.pipe(request(opt));
  };

  module.exports = function(opt) {
    opt.uber({
      src: './src',
      out: './out',
      maxDepth: 4
    });
    return function(req, res, next) {
      var breadcrumbs, get, i, layout, linkAndLoad, locals, loopLayout, render, srcPath, url;
      url = u.parse(req.url);
      get = function(path) {
        var d, trypath;
        d = Q.defer();
        if (!path) {
          console.log('no path?', path);
          d.resolve(null);
        }
        trypath = path + '.yaml';
        fs.readFile(trypath, 'utf8', function(err, data) {
          var doc;
          if (err) {
            if (err.code === 'ENOENT') {
              trypath = p.join(path, 'index.yaml');
              return fs.readFile(trypath, 'utf8', function(err, data) {
                var doc;
                if (err) {
                  return d.reject(err);
                } else {
                  doc = yaml.safeLoad(data);
                  doc.isindex = true;
                  return d.resolve(doc);
                }
              });
            } else {
              return d.reject(err);
            }
          } else {
            doc = yaml.safeLoad(data);
            return d.resolve(doc);
          }
        });
        return d.promise;
      };
      linkAndLoad = function(locals, path, isindex) {
        var d;
        if (isindex == null) {
          isindex = locals.isindex;
        }
        d = Q.defer();
        each(Object.keys(locals), function(key, i, done) {
          var newProp, prop, rs;
          prop = locals[key];
          if (prop.hasOwnProperty('$link')) {
            locals[key] = link(req, prop.$link, isindex);
            return done();
          } else if (prop.hasOwnProperty('$load')) {
            newProp = '';
            return rs = load(req, prop.$load, path, isindex).on('data', function(data) {
              return newProp += data;
            }).on('end', function() {
              var _ref, _ref1;
              if ((_ref = rs.response) != null ? (_ref1 = _ref.headers['content-type']) != null ? _ref1.match(/application\/json/) : void 0 : void 0) {
                locals[key] = JSON.parse(newProp);
              } else {
                locals[key] = newProp.toString();
              }
              return done();
            }).on('error', done);
          } else if (typeof prop === 'object') {
            return linkAndLoad(prop, path, isindex).then(function() {
              return done();
            }).fail(function(err) {
              return done(err);
            });
          } else {
            return done();
          }
        }, function(err) {
          if (err) {
            return d.reject(err);
          }
          return d.resolve(locals);
        });
        return d.promise;
      };
      layout = function(locals) {
        var srcPath;
        if (locals.content == null) {
          locals.content = locals.body;
        }
        srcPath = p.resolve('.', p.join(opt.src, 'layouts', locals.layout));
        return get(srcPath).then(function(meta) {
          return linkAndLoad(meta, srcPath);
        }).then(function(meta) {
          debugger;
          delete locals.layout;
          locals.uber(meta);
          if (locals.template != null) {
            return render(locals);
          } else {
            return locals;
          }
        });
      };
      render = function(locals) {
        locals.basedir = p.resolve('.', p.join(opt.src, 'layouts'));
        return Q.nfcall(jade.render, locals.template, locals).then(function(rendered) {
          locals.content = rendered;
          delete locals.template;
          return locals;
        });
      };
      breadcrumbs = function(locals) {
        var d, urlsplit;
        d = Q.defer();
        urlsplit = locals.url.split('/').slice(1);
        breadcrumbs = [
          {
            url: '/',
            title: 'Home'
          }
        ];
        each(urlsplit, function(part, i, done) {
          var crumb, srcPath;
          console.log(i, part);
          crumb = {
            url: '/' + urlsplit.slice(0, i + 1).join('/')
          };
          console.log(crumb);
          srcPath = p.resolve('.', p.join(opt.src, 'docs', crumb.url));
          return get(srcPath).then(function(meta) {
            console.log('meta', meta);
            crumb.title = meta.title;
            breadcrumbs[i + 1] = crumb;
            return done();
          }).fail(function(err) {
            console.log(err);
            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
              crumb.dir = part;
              breadcrumbs[i + 1] = crumb;
              return done();
            } else {
              return done(err);
            }
          });
        }, function(err) {
          if (err) {
            return d.reject(err);
          }
          console.log(breadcrumbs);
          locals.breadcrumbs = breadcrumbs;
          return d.resolve(locals);
        });
        return d.promise;
      };
      srcPath = p.resolve('.', p.join(opt.src, 'docs', url.parse(req.url).pathname));
      locals = {
        site: opt.site
      };
      i = 0;
      return get(srcPath).then(function(meta) {
        return linkAndLoad(meta, srcPath);
      }).then(function(meta) {
        locals.uber(meta);
        locals.url = url.parse(req.url).pathname;
        if (locals.body != null) {
          locals.body = md(locals.body);
        }
        if (locals.template != null) {
          return render(locals);
        } else {
          return locals;
        }
      }).then(loopLayout = function(locals) {
        i++;
        if (i > opt.maxDepth) {
          throw new Error('Max layout depth exceeded');
        }
        return Q.when(locals).then(function(locals) {
          if (locals.layout != null) {
            return loopLayout(layout(locals));
          } else {
            return locals;
          }
        });
      }).then(function(locals) {
        if (locals.content != null) {
          return res.send(locals.content);
        } else {
          return res.send(locals);
        }
      }).fail(function(err) {
        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
          return next();
        } else {
          return next(err);
        }
      }).done();
    };
  };

}).call(this);
